{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-note-js","path":"/notes/xstate-playground-project-1/","result":{"data":{"mdx":{"id":"21492b1c-422d-5cb9-b803-090583abee10","excerpt":"xstate-playground Some experiments and examples using  xstate  library. Most notable is the  tic-tac-toe  game with AI: the  perfect  one isâ€¦","frontmatter":{"title":"","date":"2022-01-04T00:00:00.000Z","tags":["project","actor-model","xstate","code"],"cover":null},"fields":{"slug":"/notes/xstate-playground-project-1/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2022-01-04T00:00:00.000Z\",\n  \"tags\": [\"project\", \"actor-model\", \"xstate\", \"code\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"xstate-playground\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"https://github.com/MrNovado/xstate-playground\"\n  }), \"xstate-playground\")), mdx(\"p\", null, \"Some experiments and examples using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/davidkpiano/xstate\"\n  }), \"xstate\"), \" library. Most notable is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tic-tac-toe\"), \" game with AI: the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"perfect\"), \" one is an implementation of the Newell and Simon's expert model. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"perfect\"), \" AI is implemented in a declarative way, while others are imperative. You can also choose to play manually for either side.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Statefull buttons\"), \" is an experiment around state-styling. And \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ping-pong\"), \" is an mvp implementation of an actor-model. Check the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/MrNovado/xstate-playground\"\n  }), \"code\"), \" to see what's up.\"), mdx(\"p\", null, \"Here's the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mrnovado.github.io/xstate-playground/#/\"\n  }), \"live demo\"), \":\"), mdx(\"iframe\", {\n    height: \"350\",\n    style: {\n      \"width\": \"100%\",\n      \"backgroundColor\": \"white\"\n    },\n    scrolling: \"yes\",\n    title: \"Liquid button\",\n    src: \"https://mrnovado.github.io/xstate-playground/#/\",\n    frameBorder: \"no\",\n    allowtransparency: \"no\",\n    allowFullScreen: \"true\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"21492b1c-422d-5cb9-b803-090583abee10"}}}